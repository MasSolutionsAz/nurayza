// <auto-generated />
using System;
using ILoveBaku.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace ILoveBaku.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20200607142038_initial")]
    partial class initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("ILoveBaku.Domain.Entities.Branches", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CompanyDetailsId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("CreatedIp")
                        .HasColumnName("CreatedIP")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CompanyDetailsId");

                    b.ToTable("Branches");
                });

            modelBuilder.Entity("ILoveBaku.Domain.Entities.BranchesFloors", b =>
                {
                    b.Property<byte>("Id")
                        .HasColumnType("tinyint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("BranchesFloors");
                });

            modelBuilder.Entity("ILoveBaku.Domain.Entities.BranchesFloorsRelations", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte>("BranchesFloorsId")
                        .HasColumnType("tinyint");

                    b.Property<int?>("BranchesPlacesId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BranchesPlacesId");

                    b.ToTable("BranchesFloorsRelations");
                });

            modelBuilder.Entity("ILoveBaku.Domain.Entities.BranchesPlaces", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BranchesId")
                        .HasColumnType("int");

                    b.Property<bool?>("IsActive")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<bool>("IsSalesRows")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(60)")
                        .HasMaxLength(60);

                    b.Property<byte>("Priority")
                        .HasColumnType("tinyint");

                    b.HasKey("Id");

                    b.ToTable("BranchesPlaces");
                });

            modelBuilder.Entity("ILoveBaku.Domain.Entities.BranchesSectorsRelations", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BranchesFloorsRelationsId")
                        .HasColumnType("int");

                    b.Property<int>("BranchesSectorsId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("BranchesSectorsRelations");
                });

            modelBuilder.Entity("ILoveBaku.Domain.Entities.BranchesSectorsShelfsRelations", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BranchesSectorsRelationsId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("BranchesSectorsShelfsRelations");
                });

            modelBuilder.Entity("ILoveBaku.Domain.Entities.Cart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte>("CartStatusId")
                        .HasColumnType("tinyint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("Carts");
                });

            modelBuilder.Entity("ILoveBaku.Domain.Entities.CartDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CartId")
                        .HasColumnType("int");

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CartId");

                    b.HasIndex("ProductId");

                    b.ToTable("CartDetails");
                });

            modelBuilder.Entity("ILoveBaku.Domain.Entities.CartOrder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CartId")
                        .HasColumnType("int");

                    b.Property<byte>("CartOrderStatusId")
                        .HasColumnType("tinyint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("OrderId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SessionId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CartId");

                    b.ToTable("CartOrders");
                });

            modelBuilder.Entity("ILoveBaku.Domain.Entities.CartOrderStatus", b =>
                {
                    b.Property<byte>("Id")
                        .HasColumnType("tinyint");

                    b.Property<string>("KapitalOrderStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("CartOrderStatuses");
                });

            modelBuilder.Entity("ILoveBaku.Domain.Entities.CartStatus", b =>
                {
                    b.Property<byte>("Id")
                        .HasColumnType("tinyint");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("CartStatuses");
                });

            modelBuilder.Entity("ILoveBaku.Domain.Entities.CashDesk", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BranchesFloorsRelationsId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("BranchesFloorsRelationsId");

                    b.ToTable("CashDesk");
                });

            modelBuilder.Entity("ILoveBaku.Domain.Entities.CashDeskConfigurations", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CashDeskId")
                        .HasColumnType("int");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("CashDeskConfigurations");
                });

            modelBuilder.Entity("ILoveBaku.Domain.Entities.CashDeskSeance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CashDeskId")
                        .HasColumnType("int");

                    b.Property<byte>("CashDeskSeanceStatusesId")
                        .HasColumnType("tinyint");

                    b.Property<decimal>("CurrentAmount")
                        .HasColumnType("decimal(10, 4)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<decimal>("EndAmount")
                        .HasColumnType("decimal(10, 4)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime");

                    b.Property<decimal>("StartAmount")
                        .HasColumnType("decimal(10, 4)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime");

                    b.Property<Guid>("UsersId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CashDeskId");

                    b.ToTable("CashDeskSeance");
                });

            modelBuilder.Entity("ILoveBaku.Domain.Entities.CashDeskSeanceManualProducts", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BranchesId")
                        .HasColumnType("int");

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.Property<int>("ProductsId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("CashDeskSeanceManualProducts");
                });

            modelBuilder.Entity("ILoveBaku.Domain.Entities.CashDeskSeanceManualTransactionsTypes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool?>("IsActive")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<int?>("Priority")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("CashDeskSeanceManualTransactionsTypes");
                });

            modelBuilder.Entity("ILoveBaku.Domain.Entities.CashDeskSeanceStatuses", b =>
                {
                    b.Property<byte>("Id")
                        .HasColumnType("tinyint");

                    b.Property<bool?>("IsActive")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<int?>("Priority")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("CashDeskSeanceStatuses");
                });

            modelBuilder.Entity("ILoveBaku.Domain.Entities.Categories", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int");

                    b.Property<byte?>("Priority")
                        .HasColumnType("tinyint");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("ILoveBaku.Domain.Entities.CategoriesFiles", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CategoriesId")
                        .HasColumnType("int");

                    b.Property<int>("FilesId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoriesId");

                    b.HasIndex("FilesId");

                    b.ToTable("CategoriesFiles");
                });

            modelBuilder.Entity("ILoveBaku.Domain.Entities.CategoriesLangs", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CategoriesId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<byte>("LangsId")
                        .HasColumnType("tinyint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("CategoriesId");

                    b.HasIndex("LangsId");

                    b.ToTable("CategoriesLangs");
                });

            modelBuilder.Entity("ILoveBaku.Domain.Entities.CategoriesSpecifications", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CategoriesSpecificationGroupId")
                        .HasColumnType("int");

                    b.Property<byte>("CategoriesSpecificationsStatusesId")
                        .HasColumnType("tinyint");

                    b.Property<byte>("CategoriesSpecificationsTypeId")
                        .HasColumnType("tinyint");

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.HasIndex("CategoriesSpecificationsTypeId");

                    b.ToTable("CategoriesSpecifications");
                });

            modelBuilder.Entity("ILoveBaku.Domain.Entities.CategoriesSpecificationsGroups", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool?>("IsActive")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("CategoriesSpecificationsGroups");
                });

            modelBuilder.Entity("ILoveBaku.Domain.Entities.CategoriesSpecificationsGroupsLangs", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CategoriesSpecificationsGroupsId")
                        .HasColumnType("int");

                    b.Property<byte>("LangsId")
                        .HasColumnType("tinyint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.HasIndex("CategoriesSpecificationsGroupsId");

                    b.HasIndex("LangsId");

                    b.ToTable("CategoriesSpecificationsGroupsLangs");
                });

            modelBuilder.Entity("ILoveBaku.Domain.Entities.CategoriesSpecificationsLangs", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CategoriesSpecificationsId")
                        .HasColumnType("int");

                    b.Property<byte>("LangsId")
                        .HasColumnType("tinyint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.HasIndex("CategoriesSpecificationsId");

                    b.HasIndex("LangsId");

                    b.ToTable("CategoriesSpecificationsLangs");
                });

            modelBuilder.Entity("ILoveBaku.Domain.Entities.CategoriesSpecificationsProperties", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CategoriesSpecificationId")
                        .HasColumnType("int");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("CategoriesSpecificationId");

                    b.ToTable("CategoriesSpecificationsProperties");
                });

            modelBuilder.Entity("ILoveBaku.Domain.Entities.CategoriesSpecificationsPropertiesLangs", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CategoriesSpecificationsPropertiesId")
                        .HasColumnType("int");

                    b.Property<byte>("LangsId")
                        .HasColumnType("tinyint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("CategoriesSpecificationsPropertiesId");

                    b.HasIndex("LangsId");

                    b.ToTable("CategoriesSpecificationsPropertiesLangs");
                });

            modelBuilder.Entity("ILoveBaku.Domain.Entities.CategoriesSpecificationsRelations", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CategoriesId")
                        .HasColumnType("int");

                    b.Property<int>("CategoriesSpecificationId")
                        .HasColumnType("int");

                    b.Property<bool?>("IsActive")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.HasKey("Id");

                    b.HasIndex("CategoriesSpecificationId");

                    b.ToTable("CategoriesSpecificationsRelations");
                });

            modelBuilder.Entity("ILoveBaku.Domain.Entities.CategoriesSpecificationsStatuses", b =>
                {
                    b.Property<byte>("Id")
                        .HasColumnType("tinyint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("CategoriesSpecificationsStatuses");
                });

            modelBuilder.Entity("ILoveBaku.Domain.Entities.CategoriesSpecificationsTypes", b =>
                {
                    b.Property<byte>("Id")
                        .HasColumnType("tinyint");

                    b.Property<byte?>("CategorySpecificationsTypesControllersId")
                        .HasColumnType("tinyint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(30)")
                        .HasMaxLength(30);

                    b.Property<string>("TableName")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("CategorySpecificationsTypesControllersId");

                    b.ToTable("CategoriesSpecificationsTypes");
                });

            modelBuilder.Entity("ILoveBaku.Domain.Entities.CategorySpecificationsTypesControllers", b =>
                {
                    b.Property<byte>("Id")
                        .HasColumnType("tinyint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("CategorySpecificationsTypesControllers");
                });

            modelBuilder.Entity("ILoveBaku.Domain.Entities.CategorySpecificationsTypesControllersSpecifications", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.Property<string>("TableName")
                        .IsRequired()
                        .HasColumnType("varchar(150)")
                        .HasMaxLength(150)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("CategorySpecificationsTypesControllersSpecifications");
                });

            modelBuilder.Entity("ILoveBaku.Domain.Entities.CategorySpecificationsTypesControllersSpecificationsProperties", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CategorySpecificationsTypesControllersSpecificationsId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("CategorySpecificationsTypesControllersSpecificationsProperties");
                });

            modelBuilder.Entity("ILoveBaku.Domain.Entities.CategorySpecificationsTypesControllersSpecificationsValuesList", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CategorySpecificationsId")
                        .HasColumnType("int");

                    b.Property<int>("CategorySpecificationsTypesControllersSpecificationsPropertiesId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("CategorySpecificationsTypesControllersSpecificationsValuesList");
                });

            modelBuilder.Entity("ILoveBaku.Domain.Entities.CategorySpecificationsTypesControllersSpecificationsValuesStrings", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CategorySpecificationsId")
                        .HasColumnType("int");

                    b.Property<int>("CategorySpecificationsTypesControllersSpecificationsPropertiesId")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("CategorySpecificationsTypesControllersSpecificationsValuesStrings");
                });

            modelBuilder.Entity("ILoveBaku.Domain.Entities.CategorySpecificationsTypesSpecificationsRelations", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte>("CategorySpecificationsTypesControllersId")
                        .HasColumnType("tinyint");

                    b.Property<int>("CategorySpecificationsTypesControllersSpecificationsId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategorySpecificationsTypesControllersSpecificationsId");

                    b.ToTable("CategorySpecificationsTypesSpecificationsRelations");
                });

            modelBuilder.Entity("ILoveBaku.Domain.Entities.Companies", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("CreatedIp")
                        .HasColumnName("CreatedIP")
                        .HasColumnType("int");

                    b.Property<bool?>("IsActive")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Voen")
                        .IsRequired()
                        .HasColumnName("VOEN")
                        .HasColumnType("varchar(30)")
                        .HasMaxLength(30)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("Companies");
                });

            modelBuilder.Entity("ILoveBaku.Domain.Entities.CompanyDebts", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(10, 4)");

                    b.Property<int>("BranchesId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("SuppliersId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.ToTable("CompanyDebts");
                });

            modelBuilder.Entity("ILoveBaku.Domain.Entities.CompanyDetails", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<int>("CompaniesId")
                        .HasColumnType("int");

                    b.Property<byte>("CompanyDetailsTypesId")
                        .HasColumnType("tinyint");

                    b.Property<string>("Contacts")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("ContactsName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("CreatedIp")
                        .HasColumnName("CreatedIP")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("varchar(30)")
                        .HasMaxLength(30)
                        .IsUnicode(false);

                    b.Property<bool?>("IsActive")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Sun")
                        .IsRequired()
                        .HasColumnName("SUN")
                        .HasColumnType("varchar(20)")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("CompanyDetails");
                });

            modelBuilder.Entity("ILoveBaku.Domain.Entities.CompanyDetailsTypes", b =>
                {
                    b.Property<byte>("Id")
                        .HasColumnType("tinyint");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<byte?>("ParentId")
                        .HasColumnType("tinyint");

                    b.HasKey("Id");

                    b.ToTable("CompanyDetailsTypes");
                });

            modelBuilder.Entity("ILoveBaku.Domain.Entities.CompanyTransactions", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(10, 4)");

                    b.Property<byte>("CompanyTransactionTypesId")
                        .HasColumnType("tinyint");

                    b.Property<byte>("CompanyTransactionsStatusesId")
                        .HasColumnType("tinyint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("CreatedIp")
                        .HasColumnName("CreatedIP")
                        .HasColumnType("int");

                    b.Property<int?>("ProductTransactionsId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("CompanyTransactions");
                });

            modelBuilder.Entity("ILoveBaku.Domain.Entities.CompanyTransactionsStatuses", b =>
                {
                    b.Property<byte>("Id")
                        .HasColumnType("tinyint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<byte?>("ParentId")
                        .HasColumnType("tinyint");

                    b.HasKey("Id");

                    b.ToTable("CompanyTransactionsStatuses");
                });

            modelBuilder.Entity("ILoveBaku.Domain.Entities.CompanyTransactionsTypes", b =>
                {
                    b.Property<byte>("Id")
                        .HasColumnType("tinyint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("CompanyTransactionsTypes");
                });

            modelBuilder.Entity("ILoveBaku.Domain.Entities.ConfigurationsTypes", b =>
                {
                    b.Property<byte>("Id")
                        .HasColumnType("tinyint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("ConfigurationsTypes");
                });

            modelBuilder.Entity("ILoveBaku.Domain.Entities.Contacts", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte>("ContactsStatusesId")
                        .HasColumnType("tinyint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(2000)")
                        .HasMaxLength(2000);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("varchar(20)")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("Contacts");
                });

            modelBuilder.Entity("ILoveBaku.Domain.Entities.ContactsStatuses", b =>
                {
                    b.Property<byte>("Id")
                        .HasColumnType("tinyint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("ContactsStatuses");
                });

            modelBuilder.Entity("ILoveBaku.Domain.Entities.Contents", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ContentsCategoriesId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("FilesId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsVisible")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("FilesId");

                    b.ToTable("Contents");
                });

            modelBuilder.Entity("ILoveBaku.Domain.Entities.ContentsCategories", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.ToTable("ContentsCategories");
                });

            modelBuilder.Entity("ILoveBaku.Domain.Entities.ContentsCategoriesLangs", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ContentsCategoriesId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<byte>("LangsId")
                        .HasColumnType("tinyint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.ToTable("ContentsCategoriesLangs");
                });

            modelBuilder.Entity("ILoveBaku.Domain.Entities.ContentsLangs", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ContentHtml")
                        .IsRequired()
                        .HasColumnName("ContentHTML")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ContentsId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<byte>("LangsId")
                        .HasColumnType("tinyint");

                    b.Property<string>("SubTitle")
                        .HasColumnType("nvarchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("VisitorCount")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ContentsId");

                    b.HasIndex("LangsId");

                    b.ToTable("ContentsLangs");
                });

            modelBuilder.Entity("ILoveBaku.Domain.Entities.Countries", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("ILoveBaku.Domain.Entities.ErrorLogs", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("CreatedIp")
                        .HasColumnName("CreatedIP")
                        .HasColumnType("datetime");

                    b.Property<string>("LogText")
                        .IsRequired()
                        .HasColumnType("nvarchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnName("URL")
                        .HasColumnType("varchar(200)")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("ErrorLogs");
                });

            modelBuilder.Entity("ILoveBaku.Domain.Entities.Files", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("ContentLength")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("FilesFoldersId")
                        .HasColumnType("int");

                    b.Property<int>("FilesTypesId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Path")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("FilesFoldersId");

                    b.HasIndex("FilesTypesId");

                    b.ToTable("Files");
                });

            modelBuilder.Entity("ILoveBaku.Domain.Entities.FilesFolders", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsAllowDelete")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<int?>("ParentId")
                        .HasColumnType("int");

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("FilesFolders ");
                });

            modelBuilder.Entity("ILoveBaku.Domain.Entities.FilesTypes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte>("FilesTypesGroupsId")
                        .HasColumnType("tinyint");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("FilesTypes");
                });

            modelBuilder.Entity("ILoveBaku.Domain.Entities.FilesTypesGroups", b =>
                {
                    b.Property<byte>("Id")
                        .HasColumnType("tinyint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("FilesTypesGroups");
                });

            modelBuilder.Entity("ILoveBaku.Domain.Entities.Keywords", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("Keywords");
                });

            modelBuilder.Entity("ILoveBaku.Domain.Entities.LangStatuses", b =>
                {
                    b.Property<byte>("Id")
                        .HasColumnType("tinyint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("LangStatuses");
                });

            modelBuilder.Entity("ILoveBaku.Domain.Entities.Langs", b =>
                {
                    b.Property<byte>("Id")
                        .HasColumnType("tinyint");

                    b.Property<string>("Culture")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<byte>("LangsStatusesId")
                        .HasColumnType("tinyint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("char(2)")
                        .IsFixedLength(true)
                        .HasMaxLength(2)
                        .IsUnicode(false);

                    b.Property<byte>("Priority")
                        .HasColumnType("tinyint");

                    b.HasKey("Id");

                    b.ToTable("Langs");
                });

            modelBuilder.Entity("ILoveBaku.Domain.Entities.Menu", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Link")
                        .IsRequired()
                        .HasColumnType("varchar(max)")
                        .IsUnicode(false);

                    b.Property<byte>("MenuTypesId")
                        .HasColumnType("tinyint");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int");

                    b.Property<int?>("Priority")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("Menu");
                });

            modelBuilder.Entity("ILoveBaku.Domain.Entities.MenuBannerItems", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("FilesId")
                        .HasColumnType("int");

                    b.Property<string>("Link")
                        .IsRequired()
                        .HasColumnType("varchar(max)")
                        .IsUnicode(false);

                    b.Property<int>("MenuId")
                        .HasColumnType("int");

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FilesId");

                    b.ToTable("MenuBannerItems");
                });

            modelBuilder.Entity("ILoveBaku.Domain.Entities.MenuCategoriesItems", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CategoriesId")
                        .HasColumnType("int");

                    b.Property<int?>("CategoriesParentId")
                        .HasColumnType("int");

                    b.Property<int>("MenuId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoriesId");

                    b.HasIndex("MenuId");

                    b.ToTable("MenuCategoriesItems");
                });

            modelBuilder.Entity("ILoveBaku.Domain.Entities.MenuLangs", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<byte>("LangsId")
                        .HasColumnType("tinyint");

                    b.Property<int>("MenuId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("LangsId");

                    b.HasIndex("MenuId");

                    b.ToTable("MenuLangs");
                });

            modelBuilder.Entity("ILoveBaku.Domain.Entities.MenuTypes", b =>
                {
                    b.Property<byte>("Id")
                        .HasColumnType("tinyint");

                    b.Property<bool?>("IsActive")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("MenuTypes");
                });

            modelBuilder.Entity("ILoveBaku.Domain.Entities.News", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ShowDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.ToTable("News");
                });

            modelBuilder.Entity("ILoveBaku.Domain.Entities.NewsFiles", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("FilesId")
                        .HasColumnType("int");

                    b.Property<byte>("NewsFilesTypesId")
                        .HasColumnType("tinyint");

                    b.Property<int>("NewsId")
                        .HasColumnType("int");

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FilesId");

                    b.HasIndex("NewsId");

                    b.ToTable("NewsFiles");
                });

            modelBuilder.Entity("ILoveBaku.Domain.Entities.NewsFilesTypes", b =>
                {
                    b.Property<byte>("Id")
                        .HasColumnType("tinyint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("NewsFilesTypes");
                });

            modelBuilder.Entity("ILoveBaku.Domain.Entities.NewsKeywords", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("KeywordsId")
                        .HasColumnType("int");

                    b.Property<int>("NewsLangsId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("NewsKeywords");
                });

            modelBuilder.Entity("ILoveBaku.Domain.Entities.NewsLangs", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ContentHtml")
                        .IsRequired()
                        .HasColumnType("nvarchar(4000)")
                        .HasMaxLength(4000);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte>("LangsId")
                        .HasColumnType("tinyint");

                    b.Property<int>("NewsId")
                        .HasColumnType("int");

                    b.Property<byte>("NewsLangsStatusesId")
                        .HasColumnType("tinyint");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<string>("TitleUrl")
                        .IsRequired()
                        .HasColumnType("varchar(800)")
                        .HasMaxLength(800)
                        .IsUnicode(false);

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("ViewCount")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LangsId");

                    b.HasIndex("NewsId");

                    b.ToTable("NewsLangs");
                });

            modelBuilder.Entity("ILoveBaku.Domain.Entities.NewsLangsStatuses", b =>
                {
                    b.Property<byte>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("NewsLangsStatuses");
                });

            modelBuilder.Entity("ILoveBaku.Domain.Entities.ProductGroups", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CategoriesId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("CreatedIp")
                        .HasColumnName("CreatedIP")
                        .HasColumnType("int");

                    b.Property<bool?>("IsActive")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("CategoriesId");

                    b.ToTable("ProductGroups");
                });

            modelBuilder.Entity("ILoveBaku.Domain.Entities.ProductSpecificationValuesBarcodes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CategoriesSpecificationsPropertiesId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsManual")
                        .HasColumnType("bit");

                    b.Property<int>("ProductsId")
                        .HasColumnType("int");

                    b.Property<long>("Value")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("Value")
                        .IsUnique()
                        .HasName("Idx_ProductSpecificationValuesBarcodes");

                    b.ToTable("ProductSpecificationValuesBarcodes");
                });

            modelBuilder.Entity("ILoveBaku.Domain.Entities.Products", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("CreatedIp")
                        .HasColumnName("CreatedIP")
                        .HasColumnType("int");

                    b.Property<decimal?>("DefaultBuyAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("DefaultCostAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("DefaultSaleAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<int>("ProductGroupsId")
                        .HasColumnType("int");

                    b.Property<decimal?>("TaxPercent")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("ProductGroupsId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("ILoveBaku.Domain.Entities.ProductsCashOut", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CashDeskSeanceId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<byte>("ProductsCashOutStatusesId")
                        .HasColumnType("tinyint");

                    b.HasKey("Id");

                    b.HasIndex("ProductsCashOutStatusesId");

                    b.ToTable("ProductsCashOut");
                });

            modelBuilder.Entity("ILoveBaku.Domain.Entities.ProductsCashOutAddresses", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ProductsCashOutId")
                        .HasColumnType("int");

                    b.Property<int>("UsersAddressInfoId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UsersAddressInfoId");

                    b.ToTable("ProductsCashOutAddresses");
                });

            modelBuilder.Entity("ILoveBaku.Domain.Entities.ProductsCashOutBonusInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("BonusAmount")
                        .HasColumnType("decimal(10, 4)");

                    b.Property<decimal>("BonusCount")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<int>("ProductsCashOutCardsId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("ProductsCashOutBonusInfo");
                });

            modelBuilder.Entity("ILoveBaku.Domain.Entities.ProductsCashOutCards", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ProductsCashOutId")
                        .HasColumnType("int");

                    b.Property<int>("UsersCardsId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductsCashOutId");

                    b.HasIndex("UsersCardsId");

                    b.ToTable("ProductsCashOutCards");
                });

            modelBuilder.Entity("ILoveBaku.Domain.Entities.ProductsCashOutDetails", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Count")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("DiscountPercent")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("PayAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ProductsCashOutId")
                        .HasColumnType("int");

                    b.Property<int>("ProductsId")
                        .HasColumnType("int");

                    b.Property<int?>("ProductsTransactionsCountId")
                        .HasColumnType("int");

                    b.Property<decimal>("SaleAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TaxPercent")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("ProductsCashOutId");

                    b.HasIndex("ProductsId");

                    b.HasIndex("ProductsTransactionsCountId");

                    b.ToTable("ProductsCashOutDetails");
                });

            modelBuilder.Entity("ILoveBaku.Domain.Entities.ProductsCashOutPayments", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(10, 4)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("ProductsCashOutId")
                        .HasColumnType("int");

                    b.Property<int>("ProductsCashOutPaymentsTypesId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("ProductsCashOutPayments");
                });

            modelBuilder.Entity("ILoveBaku.Domain.Entities.ProductsCashOutPaymentsCards", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ProductsCashOutPaymentsId")
                        .HasColumnType("int");

                    b.Property<int>("UsersCardsId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("ProductsCashOutPaymentsCards");
                });

            modelBuilder.Entity("ILoveBaku.Domain.Entities.ProductsCashOutPaymentsTypes", b =>
                {
                    b.Property<int?>("Id")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(40)")
                        .HasMaxLength(40);

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasName("Unq_ProductsCashOutPaymentsTypes_Id")
                        .HasFilter("[Id] IS NOT NULL");

                    b.ToTable("ProductsCashOutPaymentsTypes");
                });

            modelBuilder.Entity("ILoveBaku.Domain.Entities.ProductsCashOutShippingsPackets", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<byte>("DeliveryCompaniesId")
                        .HasColumnType("tinyint");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte>("ProductsCashOutShippingsPacketsStatusesId")
                        .HasColumnType("tinyint");

                    b.Property<string>("ResponsablePerson")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("ProductsCashOutShippingsPackets");
                });

            modelBuilder.Entity("ILoveBaku.Domain.Entities.ProductsCashOutShippingsPacketsDetails", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<byte>("ProductsCashOutShippingsPacketsDetailsStatuses")
                        .HasColumnType("tinyint");

                    b.Property<int>("ProductsCashOutShippingsPacketsId")
                        .HasColumnType("int");

                    b.Property<int>("ProductsCashOutsId")
                        .HasColumnType("int");

                    b.Property<Guid>("TrackingNumber")
                        .HasColumnType("uniqueidentifier")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("ProductsCashOutShippingsPacketsDetails");
                });

            modelBuilder.Entity("ILoveBaku.Domain.Entities.ProductsCashOutShippingsPacketsDetailsStatuses", b =>
                {
                    b.Property<byte>("Id")
                        .HasColumnType("tinyint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("ProductsCashOutShippingsPacketsDetailsStatuses");
                });

            modelBuilder.Entity("ILoveBaku.Domain.Entities.ProductsCashOutShippingsPacketsStatuses", b =>
                {
                    b.Property<byte>("Id")
                        .HasColumnType("tinyint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("ProductsCashOutShippingsPacketsStatuses");
                });

            modelBuilder.Entity("ILoveBaku.Domain.Entities.ProductsCashOutStatuses", b =>
                {
                    b.Property<byte>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("ProductsCashOutStatuses");
                });

            modelBuilder.Entity("ILoveBaku.Domain.Entities.ProductsFiles", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("FilesId")
                        .HasColumnType("int");

                    b.Property<bool>("IsMain")
                        .HasColumnType("bit");

                    b.Property<int>("ProductsId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FilesId");

                    b.HasIndex("ProductsId");

                    b.ToTable("ProductsFiles");
                });

            modelBuilder.Entity("ILoveBaku.Domain.Entities.ProductsStock", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BranchesId")
                        .HasColumnType("int");

                    b.Property<decimal?>("BuyAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("CostAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Count")
                        .HasColumnType("decimal(10, 4)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("MinCount")
                        .HasColumnType("int");

                    b.Property<DateTime>("PriorityDate")
                        .HasColumnType("datetime");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<byte>("ProductStockStatusesId")
                        .HasColumnType("tinyint");

                    b.Property<DateTime?>("PublishDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("TaxPercent")
                        .HasColumnType("decimal(4, 2)");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("BranchesId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductsStock");
                });

            modelBuilder.Entity("ILoveBaku.Domain.Entities.ProductsStockDiscounts", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<decimal>("DiscountValue")
                        .HasColumnType("decimal(4, 2)");

                    b.Property<DateTime>("ExpireDate")
                        .HasColumnType("datetime");

                    b.Property<decimal?>("MinimumOrder")
                        .HasColumnType("decimal(10, 4)");

                    b.Property<byte>("ProductsStockDiscountsStatusesId")
                        .HasColumnType("tinyint");

                    b.Property<int>("ProductsStockDiscountsTypesId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("ProductsStockDiscounts");
                });

            modelBuilder.Entity("ILoveBaku.Domain.Entities.ProductsStockDiscountsDetails", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("ProductsCount")
                        .HasColumnType("int");

                    b.Property<int>("ProductsStockDiscountsId")
                        .HasColumnType("int");

                    b.Property<int>("ProductsStockId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductsStockDiscountsId");

                    b.HasIndex("ProductsStockId");

                    b.ToTable("ProductsStockDiscountsDetails");
                });

            modelBuilder.Entity("ILoveBaku.Domain.Entities.ProductsStockDiscountsStatuses", b =>
                {
                    b.Property<byte>("Id")
                        .HasColumnType("tinyint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("ProductsStockDiscountsStatuses");
                });

            modelBuilder.Entity("ILoveBaku.Domain.Entities.ProductsStockLocations", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BranchesSectorsShelfsRelationsId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("ProductsStockId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.ToTable("ProductsStockLocations");
                });

            modelBuilder.Entity("ILoveBaku.Domain.Entities.ProductsStockLocationsCount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.Property<int>("ProductSstockLocationsId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("ProductsStockLocationsCount");
                });

            modelBuilder.Entity("ILoveBaku.Domain.Entities.ProductsStockSaleAmounts", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(10, 4)");

                    b.Property<byte>("ProductStockSaleAmountsTypesId")
                        .HasColumnType("tinyint");

                    b.Property<int>("ProductsStockId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductsStockId");

                    b.ToTable("ProductsStockSaleAmounts");
                });

            modelBuilder.Entity("ILoveBaku.Domain.Entities.ProductsStockSaleAmountsTypes", b =>
                {
                    b.Property<byte>("Id")
                        .HasColumnType("tinyint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("ProductsStockSaleAmountsTypes");
                });

            modelBuilder.Entity("ILoveBaku.Domain.Entities.ProductsStockSpecificationValuesInt", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CategoriesSpecificationsPropertiesId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("ProductsId")
                        .HasColumnType("int");

                    b.Property<int>("Value")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("ProductsStockSpecificationValuesInt");
                });

            modelBuilder.Entity("ILoveBaku.Domain.Entities.ProductsStockSpecificationsValuesList", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CategoriesSpecificationsPropertiesId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("ProductsId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("ProductsStockSpecificationsValuesList");
                });

            modelBuilder.Entity("ILoveBaku.Domain.Entities.ProductsStockSpecificationsValuesStrings", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CategoriesSpecificationsPropertiesId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("ProductsId")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ProductsStockSpecificationsValuesStrings");
                });

            modelBuilder.Entity("ILoveBaku.Domain.Entities.ProductsStockStatuses", b =>
                {
                    b.Property<byte>("Id")
                        .HasColumnType("tinyint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("ProductsStockStatuses");
                });

            modelBuilder.Entity("ILoveBaku.Domain.Entities.ProductsTransactionDetails", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("BuyAmount")
                        .HasColumnType("decimal(10, 4)");

                    b.Property<decimal>("CostAmount")
                        .HasColumnType("decimal(10, 4)");

                    b.Property<decimal>("Count")
                        .HasColumnType("decimal(10, 4)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<decimal>("DiscountAmount")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<decimal>("DiscountPercent")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<decimal>("PayAmount")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<int>("ProductsId")
                        .HasColumnType("int");

                    b.Property<int>("ProductsTransactionsId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductsTransactionsId");

                    b.ToTable("ProductsTransactionDetails");
                });

            modelBuilder.Entity("ILoveBaku.Domain.Entities.ProductsTransactions", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BranchesId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<int>("ProductsTransactionsStatusesId")
                        .HasColumnType("int");

                    b.Property<byte>("ProductsTransactionsTypesId")
                        .HasColumnType("tinyint");

                    b.Property<DateTime>("ReceipDate")
                        .HasColumnType("datetime");

                    b.Property<int>("ReceiptsNumber")
                        .HasColumnType("int");

                    b.Property<int>("SuppliersId")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(10, 4)");

                    b.Property<decimal>("TotalDiscountAmount")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<decimal>("TotalPayAmount")
                        .HasColumnType("decimal(10, 4)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.ToTable("ProductsTransactions");
                });

            modelBuilder.Entity("ILoveBaku.Domain.Entities.ProductsTransactionsCount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Count")
                        .HasColumnType("decimal(10, 4)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("ProductsTransactionsDetailId")
                        .HasColumnType("int");

                    b.Property<int>("ProductsTransactionsDetailsId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("ProductsTransactionsDetailId");

                    b.ToTable("ProductsTransactionsCount");
                });

            modelBuilder.Entity("ILoveBaku.Domain.Entities.ProductsTransactionsDetailsPlaces", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ProductsStockLocationsId")
                        .HasColumnType("int");

                    b.Property<int>("ProductsTransactionsDetailsId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("ProductsTransactionsDetailsPlaces");
                });

            modelBuilder.Entity("ILoveBaku.Domain.Entities.ProductsTransactionsStatuses", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool?>("IsActive")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("ProductsTransactionsStatuses");
                });

            modelBuilder.Entity("ILoveBaku.Domain.Entities.ProductsTransactionsTypes", b =>
                {
                    b.Property<byte>("Id")
                        .HasColumnType("tinyint");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<bool?>("IsActive")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<int?>("ParentId")
                        .HasColumnType("int");

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("ProductsTransactionsTypes");
                });

            modelBuilder.Entity("ILoveBaku.Domain.Entities.Regions", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<int>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Regions");
                });

            modelBuilder.Entity("ILoveBaku.Domain.Entities.Sliders", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("FilesId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Link")
                        .IsRequired()
                        .HasColumnType("varchar(max)")
                        .IsUnicode(false);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("Sliders");
                });

            modelBuilder.Entity("ILoveBaku.Domain.Entities.SlidersLangs", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte>("LangsId")
                        .HasColumnType("tinyint");

                    b.Property<int>("SlidersId")
                        .HasColumnType("int");

                    b.Property<string>("SubTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("SlidersLangs");
                });

            modelBuilder.Entity("ILoveBaku.Domain.Entities.Translations", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<string>("TransKey")
                        .IsRequired()
                        .HasColumnType("varchar(200)")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<byte>("TranslationsGroupsId")
                        .HasColumnType("tinyint");

                    b.HasKey("Id");

                    b.ToTable("Translations");
                });

            modelBuilder.Entity("ILoveBaku.Domain.Entities.TranslationsGroups", b =>
                {
                    b.Property<byte>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("TranslationsGroups");
                });

            modelBuilder.Entity("ILoveBaku.Domain.Entities.TranslationsLangs", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<byte>("LangsId")
                        .HasColumnType("tinyint");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<int>("TranslationsId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("TranslationsLangs");
                });

            modelBuilder.Entity("ILoveBaku.Domain.Entities.Users", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("BranchesId")
                        .HasColumnType("int");

                    b.Property<string>("ContactEmail")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("ContactNumber")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("CreatedIp")
                        .HasColumnName("CreatedIP")
                        .HasColumnType("int");

                    b.Property<string>("DocumentNumber")
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Patronymic")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Pin")
                        .HasColumnName("PIN")
                        .HasColumnType("varchar(10)")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime");

                    b.Property<byte>("UsersStatusesId")
                        .HasColumnType("tinyint");

                    b.HasKey("Id");

                    b.HasIndex("BranchesId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("ILoveBaku.Domain.Entities.UsersAddressInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<int>("RegionsId")
                        .HasColumnType("int");

                    b.Property<Guid>("UsersId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ZipCode")
                        .IsRequired()
                        .HasColumnType("varchar(10)")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("UsersAddressInfo");
                });

            modelBuilder.Entity("ILoveBaku.Domain.Entities.UsersCards", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("CardNumber")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("ExpireDate")
                        .HasColumnType("datetime");

                    b.Property<byte>("UserCardsStatusesId")
                        .HasColumnType("tinyint");

                    b.Property<byte>("UserCardsTypesId")
                        .HasColumnType("tinyint");

                    b.Property<Guid>("UsersId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UsersId");

                    b.ToTable("UsersCards");
                });

            modelBuilder.Entity("ILoveBaku.Domain.Entities.UsersCardsStatuses", b =>
                {
                    b.Property<byte>("Id")
                        .HasColumnType("tinyint");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("UsersCardsStatuses");
                });

            modelBuilder.Entity("ILoveBaku.Domain.Entities.UsersCardsTypes", b =>
                {
                    b.Property<byte>("Id")
                        .HasColumnType("tinyint");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("UsersCardsTypes");
                });

            modelBuilder.Entity("ILoveBaku.Domain.Entities.UsersCardsValues", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("UsersCardsId")
                        .HasColumnType("int");

                    b.Property<byte>("UsersCardsValuesTypesId")
                        .HasColumnType("tinyint");

                    b.Property<decimal>("Value")
                        .HasColumnType("decimal(10, 4)");

                    b.HasKey("Id");

                    b.ToTable("UsersCardsValues");
                });

            modelBuilder.Entity("ILoveBaku.Domain.Entities.UsersCardsValuesTypes", b =>
                {
                    b.Property<byte>("Id")
                        .HasColumnType("tinyint");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("UsersCardsValuesTypes");
                });

            modelBuilder.Entity("ILoveBaku.Domain.Entities.UsersClaims", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("DisplayName")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<byte>("UsersClaimsTypesId")
                        .HasColumnType("tinyint");

                    b.HasKey("Id");

                    b.ToTable("UsersClaims");
                });

            modelBuilder.Entity("ILoveBaku.Domain.Entities.UsersClaimsModules", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasColumnType("nvarchar(10)")
                        .HasMaxLength(10);

                    b.Property<string>("Controller")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<byte>("Priority")
                        .HasColumnType("tinyint");

                    b.Property<int>("UsersClaimsModulesGroupsId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("UsersClaimsModules");
                });

            modelBuilder.Entity("ILoveBaku.Domain.Entities.UsersClaimsModulesGroups", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<byte>("Priority")
                        .HasColumnType("tinyint");

                    b.HasKey("Id");

                    b.ToTable("UsersClaimsModulesGroups");
                });

            modelBuilder.Entity("ILoveBaku.Domain.Entities.UsersClaimsRelations", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("UsersClaimsId")
                        .HasColumnType("int");

                    b.Property<Guid>("UsersId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UsersClaimsId");

                    b.HasIndex("UsersId");

                    b.ToTable("UsersClaimsRelations");
                });

            modelBuilder.Entity("ILoveBaku.Domain.Entities.UsersClaimsTypes", b =>
                {
                    b.Property<byte>("Id")
                        .HasColumnType("tinyint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("UsersClaimsTypes");
                });

            modelBuilder.Entity("ILoveBaku.Domain.Entities.UsersExternalLogins", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ProviderKey")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<byte>("UsersExternalLoginsProvidersId")
                        .HasColumnType("tinyint");

                    b.Property<Guid>("UsersId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("UsersExternalLogins");
                });

            modelBuilder.Entity("ILoveBaku.Domain.Entities.UsersExternalLoginsProviders", b =>
                {
                    b.Property<byte>("Id")
                        .HasColumnType("tinyint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("UsersExternalLoginsProviders");
                });

            modelBuilder.Entity("ILoveBaku.Domain.Entities.UsersLogins", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("CreatedIp")
                        .HasColumnName("CreatedIP")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool?>("LockoutEnabled")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<DateTimeOffset>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<byte[]>("Password")
                        .IsRequired()
                        .HasColumnType("varbinary(8000)")
                        .HasMaxLength(8000);

                    b.Property<byte[]>("Salt")
                        .IsRequired()
                        .HasColumnType("varbinary(8000)")
                        .HasMaxLength(8000);

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime");

                    b.Property<Guid>("UsersId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UsersId")
                        .IsUnique()
                        .HasName("Idx_UsersLogins");

                    b.ToTable("UsersLogins");
                });

            modelBuilder.Entity("ILoveBaku.Domain.Entities.UsersRoles", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<Guid>("UsersRolesGroupsId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("UsersRoles");
                });

            modelBuilder.Entity("ILoveBaku.Domain.Entities.UsersRolesClaims", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ClaimsId")
                        .HasColumnType("int");

                    b.Property<Guid>("UsersRolesId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("UsersRolesClaims");
                });

            modelBuilder.Entity("ILoveBaku.Domain.Entities.UsersRolesGroups", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("UsersRolesGroups");
                });

            modelBuilder.Entity("ILoveBaku.Domain.Entities.UsersRolesRelations", b =>
                {
                    b.Property<Guid>("UsersId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UsersRolesId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UsersId")
                        .HasName("Idx_UsersRolesRelations");

                    b.ToTable("UsersRolesRelations");
                });

            modelBuilder.Entity("ILoveBaku.Domain.Entities.UsersStatuses", b =>
                {
                    b.Property<byte>("Id")
                        .HasColumnType("tinyint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("UsersStatuses");
                });

            modelBuilder.Entity("ILoveBaku.Domain.Entities.UsersTokens", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("ExpireDate")
                        .HasColumnType("datetime");

                    b.Property<Guid>("UsersId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte>("UsersTokensStatusesId")
                        .HasColumnType("tinyint");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(130)")
                        .HasMaxLength(130);

                    b.HasKey("Id");

                    b.HasIndex("UsersId");

                    b.ToTable("UsersTokens");
                });

            modelBuilder.Entity("ILoveBaku.Domain.Entities.UsersTokensStatuses", b =>
                {
                    b.Property<byte>("Id")
                        .HasColumnType("tinyint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(40)")
                        .HasMaxLength(40)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("UsersTokensStatuses");
                });

            modelBuilder.Entity("ILoveBaku.Domain.Entities.WishLists", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("ProductsStockId")
                        .HasColumnType("int");

                    b.Property<Guid>("UsersId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ProductsStockId");

                    b.ToTable("WishLists");
                });

            modelBuilder.Entity("ILoveBaku.Domain.Stored_Procedures.ProductList_sp", b =>
                {
                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("CategoryName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ProductCreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ProductGroupCreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProductGroupId")
                        .HasColumnType("int");

                    b.Property<string>("ProductGroupName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<string>("ProductName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductPhoto")
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("ProductsList_sp");
                });

            modelBuilder.Entity("ILoveBaku.Domain.Stored_Procedures.ProductValueTable", b =>
                {
                    b.Property<string>("TableName")
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("ProductValueTable");
                });

            modelBuilder.Entity("ILoveBaku.Domain.Entities.Branches", b =>
                {
                    b.HasOne("ILoveBaku.Domain.Entities.CompanyDetails", "CompanyDetails")
                        .WithMany()
                        .HasForeignKey("CompanyDetailsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ILoveBaku.Domain.Entities.BranchesFloorsRelations", b =>
                {
                    b.HasOne("ILoveBaku.Domain.Entities.BranchesPlaces", "BranchesPlaces")
                        .WithMany()
                        .HasForeignKey("BranchesPlacesId");
                });

            modelBuilder.Entity("ILoveBaku.Domain.Entities.CartDetail", b =>
                {
                    b.HasOne("ILoveBaku.Domain.Entities.Cart", "Cart")
                        .WithMany("CartDetails")
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ILoveBaku.Domain.Entities.Products", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ILoveBaku.Domain.Entities.CartOrder", b =>
                {
                    b.HasOne("ILoveBaku.Domain.Entities.Cart", "Cart")
                        .WithMany("CartOrders")
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ILoveBaku.Domain.Entities.CashDesk", b =>
                {
                    b.HasOne("ILoveBaku.Domain.Entities.BranchesFloorsRelations", "BranchesFloorsRelations")
                        .WithMany()
                        .HasForeignKey("BranchesFloorsRelationsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ILoveBaku.Domain.Entities.CashDeskSeance", b =>
                {
                    b.HasOne("ILoveBaku.Domain.Entities.CashDesk", "CashDesk")
                        .WithMany()
                        .HasForeignKey("CashDeskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ILoveBaku.Domain.Entities.CategoriesFiles", b =>
                {
                    b.HasOne("ILoveBaku.Domain.Entities.Categories", "Categories")
                        .WithMany()
                        .HasForeignKey("CategoriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ILoveBaku.Domain.Entities.Files", "Files")
                        .WithMany()
                        .HasForeignKey("FilesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ILoveBaku.Domain.Entities.CategoriesLangs", b =>
                {
                    b.HasOne("ILoveBaku.Domain.Entities.Categories", "Category")
                        .WithMany("CategoriesLangs")
                        .HasForeignKey("CategoriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ILoveBaku.Domain.Entities.Langs", "Lang")
                        .WithMany()
                        .HasForeignKey("LangsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ILoveBaku.Domain.Entities.CategoriesSpecifications", b =>
                {
                    b.HasOne("ILoveBaku.Domain.Entities.CategoriesSpecificationsTypes", "CategoriesSpecificationsType")
                        .WithMany()
                        .HasForeignKey("CategoriesSpecificationsTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ILoveBaku.Domain.Entities.CategoriesSpecificationsGroupsLangs", b =>
                {
                    b.HasOne("ILoveBaku.Domain.Entities.CategoriesSpecificationsGroups", "CategoriesSpecificationsGroup")
                        .WithMany()
                        .HasForeignKey("CategoriesSpecificationsGroupsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ILoveBaku.Domain.Entities.Langs", "Lang")
                        .WithMany()
                        .HasForeignKey("LangsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ILoveBaku.Domain.Entities.CategoriesSpecificationsLangs", b =>
                {
                    b.HasOne("ILoveBaku.Domain.Entities.CategoriesSpecifications", "CategorySpecification")
                        .WithMany()
                        .HasForeignKey("CategoriesSpecificationsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ILoveBaku.Domain.Entities.Langs", "Lang")
                        .WithMany()
                        .HasForeignKey("LangsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ILoveBaku.Domain.Entities.CategoriesSpecificationsProperties", b =>
                {
                    b.HasOne("ILoveBaku.Domain.Entities.CategoriesSpecifications", "CategoriesSpecification")
                        .WithMany()
                        .HasForeignKey("CategoriesSpecificationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ILoveBaku.Domain.Entities.CategoriesSpecificationsPropertiesLangs", b =>
                {
                    b.HasOne("ILoveBaku.Domain.Entities.CategoriesSpecificationsProperties", "CategorySpecificationProperty")
                        .WithMany()
                        .HasForeignKey("CategoriesSpecificationsPropertiesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ILoveBaku.Domain.Entities.Langs", "Lang")
                        .WithMany()
                        .HasForeignKey("LangsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ILoveBaku.Domain.Entities.CategoriesSpecificationsRelations", b =>
                {
                    b.HasOne("ILoveBaku.Domain.Entities.CategoriesSpecifications", "CategoriesSpecification")
                        .WithMany()
                        .HasForeignKey("CategoriesSpecificationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ILoveBaku.Domain.Entities.CategoriesSpecificationsTypes", b =>
                {
                    b.HasOne("ILoveBaku.Domain.Entities.CategorySpecificationsTypesControllers", "CategoriesSpecificationsTypesController")
                        .WithMany()
                        .HasForeignKey("CategorySpecificationsTypesControllersId");
                });

            modelBuilder.Entity("ILoveBaku.Domain.Entities.CategorySpecificationsTypesSpecificationsRelations", b =>
                {
                    b.HasOne("ILoveBaku.Domain.Entities.CategorySpecificationsTypesControllersSpecifications", "CategorySpecificationsTypesControllersSpecification")
                        .WithMany()
                        .HasForeignKey("CategorySpecificationsTypesControllersSpecificationsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ILoveBaku.Domain.Entities.Contents", b =>
                {
                    b.HasOne("ILoveBaku.Domain.Entities.Files", "File")
                        .WithMany()
                        .HasForeignKey("FilesId");
                });

            modelBuilder.Entity("ILoveBaku.Domain.Entities.ContentsLangs", b =>
                {
                    b.HasOne("ILoveBaku.Domain.Entities.Contents", "Content")
                        .WithMany()
                        .HasForeignKey("ContentsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ILoveBaku.Domain.Entities.Langs", "Lang")
                        .WithMany()
                        .HasForeignKey("LangsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ILoveBaku.Domain.Entities.Files", b =>
                {
                    b.HasOne("ILoveBaku.Domain.Entities.FilesFolders", "FileFolder")
                        .WithMany()
                        .HasForeignKey("FilesFoldersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ILoveBaku.Domain.Entities.FilesTypes", "FileTypes")
                        .WithMany()
                        .HasForeignKey("FilesTypesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ILoveBaku.Domain.Entities.MenuBannerItems", b =>
                {
                    b.HasOne("ILoveBaku.Domain.Entities.Files", "File")
                        .WithMany()
                        .HasForeignKey("FilesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ILoveBaku.Domain.Entities.MenuCategoriesItems", b =>
                {
                    b.HasOne("ILoveBaku.Domain.Entities.Categories", "Category")
                        .WithMany()
                        .HasForeignKey("CategoriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ILoveBaku.Domain.Entities.Menu", "Menu")
                        .WithMany()
                        .HasForeignKey("MenuId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ILoveBaku.Domain.Entities.MenuLangs", b =>
                {
                    b.HasOne("ILoveBaku.Domain.Entities.Langs", "Lang")
                        .WithMany()
                        .HasForeignKey("LangsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ILoveBaku.Domain.Entities.Menu", "Menu")
                        .WithMany()
                        .HasForeignKey("MenuId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ILoveBaku.Domain.Entities.NewsFiles", b =>
                {
                    b.HasOne("ILoveBaku.Domain.Entities.Files", "Files")
                        .WithMany()
                        .HasForeignKey("FilesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ILoveBaku.Domain.Entities.News", null)
                        .WithMany("NewsFiles")
                        .HasForeignKey("NewsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ILoveBaku.Domain.Entities.NewsLangs", b =>
                {
                    b.HasOne("ILoveBaku.Domain.Entities.Langs", "Lang")
                        .WithMany()
                        .HasForeignKey("LangsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ILoveBaku.Domain.Entities.News", "News")
                        .WithMany()
                        .HasForeignKey("NewsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ILoveBaku.Domain.Entities.ProductGroups", b =>
                {
                    b.HasOne("ILoveBaku.Domain.Entities.Categories", "Category")
                        .WithMany()
                        .HasForeignKey("CategoriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ILoveBaku.Domain.Entities.Products", b =>
                {
                    b.HasOne("ILoveBaku.Domain.Entities.ProductGroups", "ProductGroup")
                        .WithMany("Products")
                        .HasForeignKey("ProductGroupsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ILoveBaku.Domain.Entities.ProductsCashOut", b =>
                {
                    b.HasOne("ILoveBaku.Domain.Entities.ProductsCashOutStatuses", "ProductsCashOutStatuses")
                        .WithMany()
                        .HasForeignKey("ProductsCashOutStatusesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ILoveBaku.Domain.Entities.ProductsCashOutAddresses", b =>
                {
                    b.HasOne("ILoveBaku.Domain.Entities.UsersAddressInfo", "UsersAddressInfo")
                        .WithMany()
                        .HasForeignKey("UsersAddressInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ILoveBaku.Domain.Entities.ProductsCashOutCards", b =>
                {
                    b.HasOne("ILoveBaku.Domain.Entities.ProductsCashOut", "ProductsCashOut")
                        .WithMany()
                        .HasForeignKey("ProductsCashOutId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ILoveBaku.Domain.Entities.UsersCards", "UsersCards")
                        .WithMany()
                        .HasForeignKey("UsersCardsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ILoveBaku.Domain.Entities.ProductsCashOutDetails", b =>
                {
                    b.HasOne("ILoveBaku.Domain.Entities.ProductsCashOut", "ProductsCashOut")
                        .WithMany()
                        .HasForeignKey("ProductsCashOutId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ILoveBaku.Domain.Entities.Products", "Products")
                        .WithMany()
                        .HasForeignKey("ProductsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ILoveBaku.Domain.Entities.ProductsTransactionsCount", "ProductsTransactionsCount")
                        .WithMany("ProductsCashOutDetails")
                        .HasForeignKey("ProductsTransactionsCountId");
                });

            modelBuilder.Entity("ILoveBaku.Domain.Entities.ProductsFiles", b =>
                {
                    b.HasOne("ILoveBaku.Domain.Entities.Files", "Files")
                        .WithMany()
                        .HasForeignKey("FilesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ILoveBaku.Domain.Entities.Products", "Products")
                        .WithMany("ProductsFiles")
                        .HasForeignKey("ProductsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ILoveBaku.Domain.Entities.ProductsStock", b =>
                {
                    b.HasOne("ILoveBaku.Domain.Entities.Branches", "Branches")
                        .WithMany()
                        .HasForeignKey("BranchesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ILoveBaku.Domain.Entities.Products", "Product")
                        .WithMany("ProductsStocks")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ILoveBaku.Domain.Entities.ProductsStockDiscountsDetails", b =>
                {
                    b.HasOne("ILoveBaku.Domain.Entities.ProductsStockDiscounts", "ProductsStockDiscounts")
                        .WithMany()
                        .HasForeignKey("ProductsStockDiscountsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ILoveBaku.Domain.Entities.ProductsStock", "ProductsStock")
                        .WithMany("ProductsStockDiscountsDetails")
                        .HasForeignKey("ProductsStockId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ILoveBaku.Domain.Entities.ProductsStockSaleAmounts", b =>
                {
                    b.HasOne("ILoveBaku.Domain.Entities.ProductsStock", null)
                        .WithMany("Sales")
                        .HasForeignKey("ProductsStockId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ILoveBaku.Domain.Entities.ProductsTransactionDetails", b =>
                {
                    b.HasOne("ILoveBaku.Domain.Entities.ProductsTransactions", "ProductsTransactions")
                        .WithMany()
                        .HasForeignKey("ProductsTransactionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ILoveBaku.Domain.Entities.ProductsTransactionsCount", b =>
                {
                    b.HasOne("ILoveBaku.Domain.Entities.ProductsTransactionDetails", "ProductsTransactionsDetail")
                        .WithMany()
                        .HasForeignKey("ProductsTransactionsDetailId");
                });

            modelBuilder.Entity("ILoveBaku.Domain.Entities.Users", b =>
                {
                    b.HasOne("ILoveBaku.Domain.Entities.Branches", "Branches")
                        .WithMany()
                        .HasForeignKey("BranchesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ILoveBaku.Domain.Entities.UsersCards", b =>
                {
                    b.HasOne("ILoveBaku.Domain.Entities.Users", "Users")
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ILoveBaku.Domain.Entities.UsersClaimsRelations", b =>
                {
                    b.HasOne("ILoveBaku.Domain.Entities.UsersClaims", "UserClaim")
                        .WithMany()
                        .HasForeignKey("UsersClaimsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ILoveBaku.Domain.Entities.Users", "User")
                        .WithMany("Claims")
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ILoveBaku.Domain.Entities.UsersLogins", b =>
                {
                    b.HasOne("ILoveBaku.Domain.Entities.Users", "User")
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ILoveBaku.Domain.Entities.UsersTokens", b =>
                {
                    b.HasOne("ILoveBaku.Domain.Entities.Users", "User")
                        .WithMany("Tokens")
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ILoveBaku.Domain.Entities.WishLists", b =>
                {
                    b.HasOne("ILoveBaku.Domain.Entities.ProductsStock", "ProductsStock")
                        .WithMany()
                        .HasForeignKey("ProductsStockId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
